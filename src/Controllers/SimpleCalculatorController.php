<?php
/*
 * APIMATICCalculatorLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 02/12/2016
 */

namespace APIMATICCalculatorLib\Controllers;

use APIMATICCalculatorLib\APIException;
use APIMATICCalculatorLib\APIHelper;
use APIMATICCalculatorLib\Configuration;
use Unirest\Unirest;
class SimpleCalculatorController {
    /**
	 * Array access utility method
     * @param  array          $arr         Array of values to read from
     * @param  string         $key         Key to get the value from the array
     * @param  mixed|null     $default     Default value to use if the key was not found */
    private function val($arr, $key, $default = NULL)
    {
        if(isset($arr[$key])) {
            return is_bool($arr[$key]) ? var_export($arr[$key], true) : $arr[$key];
        }
        return $default;
    }

    /**
     * Calculates the expression using the specified operation.
     * @param  array  $options    Array with all options for search
     * @param  OperationTypeEnum     $options['operation']     Required parameter: The operator to apply on the variables
     * @param  double                $options['x']             Required parameter: The LHS value
     * @param  double                $options['y']             Required parameter: The RHS value
     * @return double response from the API call*/
    public function getCalculate (
                $options) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/{operation}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'operation' => $this->val($options, 'operation'),
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'x'         => $this->val($options, 'x'),
            'y'         => $this->val($options, 'y'),
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
}